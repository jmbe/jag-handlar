# pack:tag Settings
# See http://www.galan.de/projects/packtag for more information about the settings


# The "mode", how pack:tag caches the resources (check the website for more information)
# In short: Defines the type of output, the tag produces. If servlet, the minified data is cached,
# if file, the data is written to a static file.
# Note that relatives pathdeklaretions won't work with type file.
#
# You can create a file "packtag.user.properties", that can override the settings in this file
# (useful during development, e.g. setting cache.type=disabled)
#
# Possible values: servlet, file, disabled
# Default is "servlet"
#cache.type=servlet


# Defines the path of the packed resources. The Application should be able to write to this directory.
# Only necessary when "packtag.cache.type" is set to file.
# Default is "pack"
#cache.file.path=pack


# Defines the path of the combined packed resources (per resourcetype)
# Only necessary when "packtag.cache.type" is set to servlet (this is the default).
# Default is ""
#cache.servlet.combined.style.path=styles
#cache.servlet.combined.script.path=scripts


# When set to true (the default), each time a resource is requested the underlying file
# is checked for modification thru the "last modified" timestamp.
# (Set to false for performance optimization. set to false also on unexploded wars)
# Default is "true"
#resources.checktimestamps=true


# Each time a resource is written to the rendered HTML-page, it is also remembered in the request.
# This way, a resource is only written once, even it is multiple times included.
# Default is "true"
#resources.tracking=true


# When set to true, an error (e.g. file not found) will not shown to the user.
# The resource will just not be written to the html page, a commented stacktrace could be written.
# Default is "false"
#hide.errors=false


# This defines the Characterset used for encoding, when loading the resources from disk.
# If not set, the default charset of the JVM is used (Java >= 1.5)
# (If you are still using Java 1.4, Latin9 will be assumed).
# A list with your supported Charsets can be found thru the Charset.availableCharsets() method
#charset=ISO-8859-15


# Should another PackStrategy for JavaScript be used, then set the Classname of that one here
#script.strategy=full qualified classname
# e.g. the YuiCompressor:
script.strategy=net.sf.packtag.implementation.yui.YuiCompressorPackStrategy

# Should another PackStrategy for CSS be used, then set the Classname of that one here
#style.strategy=full qualified classname
# eg. the CSSCompressor:
style.strategy=net.sf.packtag.implementation.yui.CssCompressorPackStrategy
